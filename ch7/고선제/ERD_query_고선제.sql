-- MySQL Script generated by MySQL Workbench
-- Fri Aug 11 19:43:52 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
-- -----------------------------------------------------
-- Schema madang
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema madang
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `madang` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`category`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`category` (
                                                 `category_id` INT NOT NULL,
                                                 `name` VARCHAR(255) NOT NULL,
    PRIMARY KEY (`category_id`));

USE `madang` ;

-- -----------------------------------------------------
-- Table `madang`.`Member`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `madang`.`Member` (
                                                 `MEMBER_ID` INT NOT NULL,
                                                 `NAME` VARCHAR(45) NULL,
    `CITY` VARCHAR(45) NULL,
    `STREET` VARCHAR(45) NULL,
    `ZIPCODE` VARCHAR(45) NULL,
    PRIMARY KEY (`MEMBER_ID`))
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `madang`.`Orders`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `madang`.`Orders` (
                                                 `ORDER_ID` INT NOT NULL,
                                                 `DELIVERY_ID` INT NULL,
                                                 `ORDER_DATE` DATETIME NULL,
                                                 `Member_MEMBER_ID` INT NOT NULL,
                                                 PRIMARY KEY (`ORDER_ID`),
    INDEX `fk_Orders_Member1_idx` (`Member_MEMBER_ID` ASC) VISIBLE,
    CONSTRAINT `fk_Orders_Member1`
    FOREIGN KEY (`Member_MEMBER_ID`)
    REFERENCES `madang`.`Member` (`MEMBER_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `madang`.`Item`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `madang`.`Item` (
                                               `ITEM_ID` INT NOT NULL,
                                               `NAME` VARCHAR(45) NULL,
    `PRICE` INT NULL,
    `STOCKQUANTITY` INT NULL,
    PRIMARY KEY (`ITEM_ID`))
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `madang`.`OrderItem`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `madang`.`OrderItem` (
                                                    `Order_Item_ID` INT NOT NULL,
                                                    `COUNT` INT NULL,
                                                    `ORDER_PRICE` INT NULL,
                                                    `Orders_ORDER_ID` INT NOT NULL,
                                                    `Item_ITEM_ID` INT NOT NULL,
                                                    PRIMARY KEY (`Order_Item_ID`),
    INDEX `fk_OrderItem_Orders1_idx` (`Orders_ORDER_ID` ASC) VISIBLE,
    INDEX `fk_OrderItem_Item1_idx` (`Item_ITEM_ID` ASC) VISIBLE,
    CONSTRAINT `fk_OrderItem_Orders1`
    FOREIGN KEY (`Orders_ORDER_ID`)
    REFERENCES `madang`.`Orders` (`ORDER_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
    CONSTRAINT `fk_OrderItem_Item1`
    FOREIGN KEY (`Item_ITEM_ID`)
    REFERENCES `madang`.`Item` (`ITEM_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `madang`.`Deliver`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `madang`.`Deliver` (
                                                  `DELIVERY_ID` INT NOT NULL,
                                                  `CITY` VARCHAR(45) NULL,
    `STREET` VARCHAR(45) NULL,
    `ZIPCODE` VARCHAR(45) NULL,
    `Orders_ORDER_ID1` INT NOT NULL,
    PRIMARY KEY (`DELIVERY_ID`),
    INDEX `fk_Deliver_Orders2_idx` (`Orders_ORDER_ID1` ASC) VISIBLE,
    CONSTRAINT `fk_Deliver_Orders2`
    FOREIGN KEY (`Orders_ORDER_ID1`)
    REFERENCES `madang`.`Orders` (`ORDER_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `madang`.`Category`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `madang`.`Category` (
                                                   `CATEGORY_ID` INT NOT NULL,
                                                   `NAME` VARCHAR(45) NULL,
    PRIMARY KEY (`CATEGORY_ID`))
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `madang`.`CategoryItem`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `madang`.`CategoryItem` (
                                                       `Item_ITEM_ID` INT NOT NULL,
                                                       `Category_CATEGORY_ID` INT NOT NULL,
                                                       INDEX `fk_CategoryItem_Item1_idx` (`Item_ITEM_ID` ASC) VISIBLE,
    INDEX `fk_CategoryItem_Category1_idx` (`Category_CATEGORY_ID` ASC) VISIBLE,
    CONSTRAINT `fk_CategoryItem_Item1`
    FOREIGN KEY (`Item_ITEM_ID`)
    REFERENCES `madang`.`Item` (`ITEM_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
    CONSTRAINT `fk_CategoryItem_Category1`
    FOREIGN KEY (`Category_CATEGORY_ID`)
    REFERENCES `madang`.`Category` (`CATEGORY_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
    ENGINE = InnoDB;

USE `madang` ;

-- -----------------------------------------------------
-- procedure AveragePrice
-- -----------------------------------------------------

DELIMITER $$
USE `madang`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `AveragePrice`(
OUT AverageVal INTEGER
)
BEGIN
SELECT AVG(price) INTO AverageVal
FROM Book WHERE price IS NOT NULL;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure BookInsertOrUpdate
-- -----------------------------------------------------

DELIMITER $$
USE `madang`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `BookInsertOrUpdate`(
    myBookID INTEGER,
    myBookName VARCHAR(40),
    myPublisher VARCHAR(40),
    myPrice INTEGER
)
BEGIN
    DECLARE mycount INTEGER;
SELECT  count(*) INTO mycount FROM Book
WHERE bookname LIKE myBookName;
IF mycount!=0 THEN
    SET SQL_SAFE_UPDATES =0;
UPDATE Book SET  price=myPrice
WHERE  bookname LIKE myBookName;
ELSE
    INSERT INTO Book(BOOKID, BOOKNAME, PUBLISHER, PRICE)
        VALUES (myBookID, myBookName, myPublisher, myPrice);
end if;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure InsertBook
-- -----------------------------------------------------

DELIMITER $$
USE `madang`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `InsertBook`(
    IN myBookID INTEGER,
    IN myBookName VARCHAR(40),
    IN myPublisher VARCHAR(40),
    IN myPrice INTEGER)
BEGIN
INSERT INTO Book(bookid, bookname, publisher, price)
VALUES (myBookID, myBookName, myPublisher, myPrice);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure Interest
-- -----------------------------------------------------

DELIMITER $$
USE `madang`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Interest`()
BEGIN
    DECLARE myInterest INTEGER DEFAULT  0.0;
    DECLARE Price INTEGER;
    DECLARE endOfRow BOOLEAN DEFAULT FALSE;
    DECLARE InterestCursor CURSOR FOR
SELECT saleprice FROM Orders;
DECLARE CONTINUE HANDLER FOR
            NOT FOUND SET endOfRow =TRUE;
OPEN InterestCursor;
cursor_loop : LOOP
        FETCH  InterestCursor INTO  Price;
        IF endOfRow THEN LEAVE cursor_loop;
END IF;
        IF Price >= 30000 THEN
            SET myInterest = myInterest + Price * 0.1;
ELSE
            SET myInterest = myInterest + Price * 0.05;
END IF;
END LOOP  cursor_loop;
CLOSE InterestCursor;
SELECT CONCAT('전체 이익 금액 =', myInterest);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure dorepeat
-- -----------------------------------------------------

DELIMITER $$
USE `madang`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `dorepeat`(p1 INT)
BEGIN
     SET @x =0;
     REPEAT SET @x = @x+1; UNTIL @x>p1 END REPEAT ;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function fnc_Interest
-- -----------------------------------------------------

DELIMITER $$
USE `madang`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `fnc_Interest`(
Price INTEGER) RETURNS int
BEGIN
    DECLARE myInterest INTEGER;
    -- 가격이 30,000원 이상이면 10%, 30,000원 미만이면 5%
    IF Price >= 30000 THEN SET myInterest = Price *0.1;
ELSE SET myInterest = Price * 0.05;
END IF;
RETURN  myInterest;
end$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;